//
// Generated Code. Do not modify.
//
// Generated by a fork of Natalie:
//   - https://github.com/ianterrell/Natalie
//   - https://github.com/krzyzanowskim/Natalie
//   - http://blog.krzyzanowskim.com
//

import UIKit

// MARK: - B

extension B: SegueHandler {
    enum SegueIdentifier: String {
        case ToCViaNav
    }

    enum ToSegueDestination: SegueDestination {
        case ToCViaNav(C)

        init?(identifier: SegueIdentifier, destination: UIViewController) {
            switch identifier {
            case .ToCViaNav:
                guard let nav = destination as? UINavigationController else { return nil }
                guard let vc = nav.viewControllers.first as? C else { return nil }
                self = ToCViaNav(vc)
            }
        }
    }
}

// MARK: - A

extension A: SegueHandler {
    enum SegueIdentifier: String {
        case ToB
    }

    enum ToSegueDestination: SegueDestination {
        case ToB(B)

        init?(identifier: SegueIdentifier, destination: UIViewController) {
            switch identifier {
            case .ToB:
                guard let vc = destination as? B else { return nil }
                self = ToB(vc)
            }
        }
    }
}
